diff --git a/.gitignore b/.gitignore
index 77ad56d1..2164e72f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,3 +9,2 @@ yarn-debug.log*
 yarn-error.log*
-lerna-debug.log*
 
@@ -54 +53,4 @@ site
 e2e-test-report/
+
+# Cache
+.cache/
diff --git a/.yarn/plugins/@yarnpkg/plugin-backstage.cjs b/.yarn/plugins/@yarnpkg/plugin-backstage.cjs
index 35e651e5..bbc9b43b 100644
--- a/.yarn/plugins/@yarnpkg/plugin-backstage.cjs
+++ b/.yarn/plugins/@yarnpkg/plugin-backstage.cjs
@@ -5,3 +5,3 @@ name: "@yarnpkg/plugin-backstage",
 factory: function (require) {
-"use strict";var plugin=(()=>{var V=Object.create;var m=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var U=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var M=(e,t,r)=>t in e?m(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var p=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var F=(e,t)=>{for(var r in t)m(e,r,{get:t[r],enumerable:!0})},B=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of U(t))!C.call(e,n)&&n!==r&&m(e,n,{get:()=>t[n],enumerable:!(o=A(t,n))||o.enumerable});return e};var G=(e,t,r)=>(r=e!=null?V(j(e)):{},B(t||!e||!e.__esModule?m(r,"default",{value:e,enumerable:!0}):r,e)),W=e=>B(m({},"__esModule",{value:!0}),e);var E=(e,t,r)=>(M(e,typeof t!="symbol"?t+"":t,r),r);var ee={};F(ee,{default:()=>Z});var R=p("@yarnpkg/core");var w=p("@yarnpkg/core");var f=p("@yarnpkg/core"),l=p("@yarnpkg/fslib"),L=p("semver");var h=G(p("fs")),c=p("path");function D(e,t){let r=e;for(let o=0;o<1e3;o++){let n=(0,c.resolve)(r,"package.json");if(h.default.existsSync(n)&&t(n))return r;let a=(0,c.dirname)(r);if(a===r)return;r=a}throw new Error(`Iteration limit reached when searching for root package.json at ${e}`)}function _(e){let t=D(e,()=>!0);if(!t)throw new Error(`No package.json found while searching for package root of ${e}`);return t}function I(e){if(!h.default.existsSync((0,c.resolve)(e,"src")))throw new Error("Tried to access monorepo package root dir outside of Backstage repository");return(0,c.resolve)(e,"../..")}function P(e){let t=_(e),r=h.default.realpathSync(process.cwd()).replace(/^[a-z]:/,i=>i.toLocaleUpperCase("en-US")),o="",n=()=>(o||(o=I(t)),o),s="",a=()=>(s||(s=D(r,i=>{try{let u=h.default.readFileSync(i,"utf8"),S=JSON.parse(u);return Boolean(S.workspaces)}catch(u){throw new Error(`Failed to parse package.json file while searching for root, ${u}`)}})??r),s);return{ownDir:t,get ownRoot(){return n()},targetDir:r,get targetRoot(){return a()},resolveOwn:(...i)=>(0,c.resolve)(t,...i),resolveOwnRoot:(...i)=>(0,c.resolve)(n(),...i),resolveTarget:(...i)=>(0,c.resolve)(r,...i),resolveTargetRoot:(...i)=>(0,c.resolve)(a(),...i)}}var b="backstage.json";var N="https://versions.backstage.io",J="https://raw.githubusercontent.com/backstage/versions/main";function H(e,t){return new Promise((r,o)=>{let n=setTimeout(()=>{t.aborted||r()},e);t.addEventListener("abort",()=>{clearTimeout(n),o(new Error("Aborted"))})})}async function K(e,t,r){let o=new AbortController,n=new AbortController,s=e(o.signal).then(i=>(n.abort(),i)),a=H(r,n.signal).then(()=>t(n.signal)).then(i=>(o.abort(),i));return Promise.any([s,a]).catch(()=>s)}async function x(e){let t=encodeURIComponent(e.version),r=e.fetch??fetch,o=await K(n=>r(`${N}/v1/releases/${t}/manifest.json`,{signal:n}),n=>r(`${J}/v1/releases/${t}/manifest.json`,{signal:n}),500);if(o.status===404)throw new Error(`No release found for ${e.version} version`);if(o.status!==200)throw new Error(`Unexpected response status ${o.status} when fetching release from ${o.url}.`);return o.json()}var g="backstage:";var v=()=>{let e=l.ppath.resolve(P(l.ppath.cwd()).targetRoot),t=l.xfs.readJsonSync(l.ppath.join(e,b)),r=(0,L.valid)(t.version);if(r===null)throw new Error("Valid version string not found in backstage.json");return r},y=(e,t)=>f.structUtils.bindDescriptor(e,{v:t}),d=async(e,t)=>{let r=f.structUtils.stringifyIdent(e),o=f.structUtils.parseRange(e.range);if(o.protocol!==g)throw new Error(`Unsupported version protocol in version range "${e.range}" for package ${r}`);if(o.selector!=="^")throw new Error(`Unexpected version selector "${o.selector}" for package ${r}`);if(!o.params?.v)throw new Error(`Missing Backstage version parameter in range "${e.range}" for package ${r}`);if(Array.isArray(o.params.v))throw new Error(`Multiple Backstage versions specified in range "${e.range}" for package ${r}`);let s=(await x({version:o.params.v,fetch:async a=>{let i=await f.httpUtils.get(a,{configuration:t,jsonResponse:!0});return{status:200,url:a,json:()=>i}}})).packages.find(a=>a.name===r);if(!s)throw new Error(`Package ${r} not found in manifest for Backstage v${o.selector}. This means the specified package is not included in this Backstage release. This may imply the package has been replaced with an alternative - please review the documentation for the package. If you need to continue using this package, it will be necessary to switch to manually managing its version.`);return s.version};var q=e=>w.structUtils.parseRange(e).protocol===g,z=(e,t,r)=>e!=="dependencies"?e:r.manifest.ensureDependencyMeta(w.structUtils.makeDescriptor(t,"unknown")).optional?"optionalDependencies":e,T=async(e,t)=>{let r=v();for(let o of["dependencies","devDependencies"]){let n=Array.from(e.manifest.getForScope(o).values()).filter(s=>s.range.startsWith(g));for(let s of n){let a=w.structUtils.stringifyIdent(s);if(w.structUtils.parseRange(s.range).selector!=="^")throw new Error(`Unexpected version range "${s.range}" for dependency on "${a}"`);let u=z(o,s,e);t[u][a]=`^${await d(y(s,r),e.project.configuration)}`}}if(["dependencies","devDependencies","optionalDependencies"].some(o=>Object.values(t[o]??{}).some(q)))throw new Error(`Failed to replace all "backstage:" ranges in manifest for ${t.name}`)};var $=p("@yarnpkg/core");var O=class{supportsDescriptor=t=>t.range.startsWith(O.protocol);shouldPersistResolution=()=>!0;bindDescriptor(t){return t.range==="backstage:^"?y(t,v()):t}async getCandidates(t,r,o){return[$.structUtils.makeLocator(t,`npm:${await d(t,o.project.configuration)}`)]}async getSatisfying(t,r,o,n){let s=await d(t,n.project.configuration);return{locators:o.filter(a=>$.structUtils.areIdentsEqual(t,a)&&a.reference===`npm:${s}`),sorted:!0}}supportsLocator=()=>!1;getResolutionDependencies=()=>({});async resolve(){throw new Error("Unreachable")}},k=O;E(k,"protocol",g);var Y="\x1B[31;1m",Q="\x1B[0m";R.semverUtils.satisfiesWithPrereleases(R.YarnVersion,"^4.1.1")||(console.error(),console.error(`${Y}Unsupported yarn version${Q}: The Backstage yarn plugin only works with yarn ^4.1.1. Please upgrade yarn, or remove this plugin with "yarn plugin remove @yarnpkg/plugin-backstage".`),console.error());var X={hooks:{beforeWorkspacePacking:T},resolvers:[k]},Z=X;return W(ee);})();
+"use strict";var plugin=(()=>{var F=Object.create;var v=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var G=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var p=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var J=(e,t)=>{for(var r in t)v(e,r,{get:t[r],enumerable:!0})},S=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of N(t))!I.call(e,o)&&o!==r&&v(e,o,{get:()=>t[o],enumerable:!(n=_(t,o))||n.enumerable});return e};var L=(e,t,r)=>(r=e!=null?F(G(e)):{},S(t||!e||!e.__esModule?v(r,"default",{value:e,enumerable:!0}):r,e)),z=e=>S(v({},"__esModule",{value:!0}),e);var ae={};J(ae,{default:()=>se});var P=p("@yarnpkg/core");var w=p("@yarnpkg/core");var W=L(p("assert")),j=p("semver"),y=p("@yarnpkg/fslib");var u=L(p("fs")),g=p("path");function A(e,t){let r=e;for(let n=0;n<1e3;n++){let o=(0,g.resolve)(r,"package.json");if(u.default.existsSync(o)&&t(o))return r;let i=(0,g.dirname)(r);if(i===r)return;r=i}throw new Error(`Iteration limit reached when searching for root package.json at ${e}`)}function K(e){let t=A(e,()=>!0);if(!t)throw new Error(`No package.json found while searching for package root of ${e}`);return t}function Y(e){if(!u.default.existsSync((0,g.resolve)(e,"src")))throw new Error("Tried to access monorepo package root dir outside of Backstage repository");return(0,g.resolve)(e,"../..")}function b(e){let t=K(e),r=u.default.realpathSync(process.cwd()).replace(/^[a-z]:/,s=>s.toLocaleUpperCase("en-US")),n="",o=()=>(n||(n=Y(t)),n),a="",i=()=>(a||(a=A(r,s=>{try{let m=u.default.readFileSync(s,"utf8");return!!JSON.parse(m).workspaces}catch(m){throw new Error(`Failed to parse package.json file while searching for root, ${m}`)}})??r),a);return{ownDir:t,get ownRoot(){return o()},targetDir:r,get targetRoot(){return i()},resolveOwn:(...s)=>(0,g.resolve)(t,...s),resolveOwnRoot:(...s)=>(0,g.resolve)(o(),...s),resolveTarget:(...s)=>(0,g.resolve)(r,...s),resolveTargetRoot:(...s)=>(0,g.resolve)(i(),...s)}}var x="backstage.json";var V=e=>{let t=!1,r;return()=>(t||(r=e(),t=!0),r)};var h=p("@yarnpkg/fslib");var C=()=>h.npath.toPortablePath(b(h.npath.fromPortablePath(h.ppath.cwd())).targetRoot);var k=V(()=>{let e=y.ppath.join(C(),x),t=null;try{t=(0,j.valid)(y.xfs.readJsonSync(e).version),(0,W.default)(t!==null)}catch{throw new Error("Valid version string not found in backstage.json")}return t});var d=p("@yarnpkg/core");var q="https://versions.backstage.io",Q="https://raw.githubusercontent.com/backstage/versions/main";function X(e,t){return new Promise((r,n)=>{let o=setTimeout(()=>{t.aborted||r()},e);t.addEventListener("abort",()=>{clearTimeout(o),n(new Error("Aborted"))})})}async function Z(e,t,r){let n=new AbortController,o=new AbortController,a=e(n.signal).then(s=>(o.abort(),s)),i=X(r,o.signal).then(()=>t(o.signal)).then(s=>(n.abort(),s));return Promise.any([a,i]).catch(()=>a)}async function D(e){let t=encodeURIComponent(e.version),r=e.fetch??fetch,n=e.versionsBaseUrl??q,o=e.gitHubRawBaseUrl??Q,a=await Z(i=>r(`${n}/v1/releases/${t}/manifest.json`,{signal:i}),i=>r(`${o}/v1/releases/${t}/manifest.json`,{signal:i}),500);if(a.status===404)throw new Error(`No release found for ${e.version} version`);if(a.status!==200)throw new Error(`Unexpected response status ${a.status} when fetching release from ${a.url}.`);return a.json()}var c="backstage:";var f=async(e,t)=>{let r=d.structUtils.stringifyIdent(e),n=d.structUtils.parseRange(e.range);if(n.protocol!==c)throw new Error(`Unsupported version protocol in version range "${e.range}" for package ${r}`);if(n.selector!=="^")throw new Error(`Unexpected version selector "${n.selector}" for package ${r}`);let o=k(),i=(await D({version:o,fetch:async s=>{let m=await d.httpUtils.get(s,{configuration:t,jsonResponse:!0});return{status:200,url:s,json:()=>m}}})).packages.find(s=>s.name===r);if(!i)throw new Error(`Package ${r} not found in manifest for Backstage v${o}. This means the specified package is not included in this Backstage release. This may imply the package has been replaced with an alternative - please review the documentation for the package. If you need to continue using this package, it will be necessary to switch to manually managing its version.`);return i.version};var ee=e=>w.structUtils.parseRange(e).protocol===c,te=(e,t,r)=>e!=="dependencies"?e:r.manifest.ensureDependencyMeta(w.structUtils.makeDescriptor(t,"unknown")).optional?"optionalDependencies":e,B=async(e,t)=>{for(let r of["dependencies","devDependencies"]){let n=Array.from(e.manifest.getForScope(r).values()).filter(o=>o.range.startsWith(c));for(let o of n){let a=w.structUtils.stringifyIdent(o);if(w.structUtils.parseRange(o.range).selector!=="^")throw new Error(`Unexpected version range "${o.range}" for dependency on "${a}"`);let s=te(r,o,e);t[s][a]=`^${await f(o,e.project.configuration)}`}}if(["dependencies","devDependencies","optionalDependencies"].some(r=>Object.values(t[r]??{}).some(ee)))throw new Error(`Failed to replace all "backstage:" ranges in manifest for ${t.name}`)};var O=p("@yarnpkg/core");var $=async(e,t)=>{let r=O.structUtils.parseRange(e.range);if(r.protocol!==c)return e;if(r.selector!=="^")throw new Error(`Invalid backstage: version range found: ${e.range}`);return O.structUtils.bindDescriptor(e,{backstage:k(),npm:await f(e,t.configuration)})};var H=p("@yarnpkg/core");var U=async(e,t,r,n)=>{let o=H.structUtils.parseRange(r.range);if(r.scope==="backstage"&&o.protocol!==c){let a=r.range;try{r.range=`${c}^`,await f(r,e.project.configuration),console.info(`Setting ${r.scope}/${r.name} to ${c}^`)}catch{r.range=a}}};var M=p("@yarnpkg/core");var E=async(e,t,r,n)=>{let o=M.structUtils.parseRange(n.range);n.scope==="backstage"&&o.protocol!==c&&console.warn(`${n.name} should be set to "${c}^" instead of "${n.range}". Make sure this change is intentional and not a mistake.`)};var l=p("@yarnpkg/core"),T=p("@yarnpkg/plugin-npm");var R=class e{static protocol=c;supportsDescriptor=t=>t.range.startsWith(e.protocol);async getCandidates(t,r,n){let o=l.structUtils.parseRange(t.range).params?.npm;if(!o||Array.isArray(o))throw new Error(`Missing npm parameter on backstage: range "${t.range}"`);return new T.NpmSemverResolver().getCandidates(l.structUtils.makeDescriptor(t,`npm:^${o}`),r,n)}getResolutionDependencies(t){let r=l.structUtils.parseRange(t.range).params?.npm;if(!r)throw new Error(`Missing npm parameter on backstage: range "${t.range}".`);return{[l.structUtils.stringifyIdent(t)]:l.structUtils.makeDescriptor(t,`npm:^${r}`)}}async getSatisfying(t,r,n,o){let a=t,i=l.structUtils.parseRange(a.range);if(i.protocol===c){let s=i.params?.npm;a=l.structUtils.makeDescriptor(t,`npm:^${s}`)}return new T.NpmSemverResolver().getSatisfying(a,r,n,o)}bindDescriptor=t=>t;supportsLocator=()=>!1;shouldPersistResolution=()=>{throw new Error("Unreachable: BackstageNpmResolver should never persist resolution as it uses npm: protocol")};resolve=async()=>{throw new Error("Unreachable: BackstageNpmResolver should never resolve as it uses npm: protocol")}};var re="\x1B[31;1m",oe="\x1B[0m";P.semverUtils.satisfiesWithPrereleases(P.YarnVersion,"^4.1.1")||(console.error(),console.error(`${re}Unsupported yarn version${oe}: The Backstage yarn plugin only works with yarn ^4.1.1. Please upgrade yarn, or remove this plugin with "yarn plugin remove @yarnpkg/plugin-backstage".`),console.error());var ne={hooks:{afterWorkspaceDependencyAddition:U,afterWorkspaceDependencyReplacement:E,reduceDependency:$,beforeWorkspacePacking:B},resolvers:[R]},se=ne;return z(ae);})();
 return plugin;
diff --git a/.yarnrc.yml b/.yarnrc.yml
index c213d450..b3222e17 100644
--- a/.yarnrc.yml
+++ b/.yarnrc.yml
@@ -3,5 +3,5 @@ nodeLinker: node-modules
 plugins:
-  - checksum: 11dfd309345f75c4a3cc224b0a76d11d501f3ecce75084f94da5191429daf43c223eefc35490e67a8e18c5f9f5fe3c53d462fba5ff374b846edd1a84ed10b181
+  - checksum: 8af7b3f2d7d19cacc7a3712f871efcb6208ba283a1f532260b0cba80c2cb66ed772b207b5ba41b8c5d64dd8d5e0c0e15bbb445bd14afac491712965211ba027c
     path: .yarn/plugins/@yarnpkg/plugin-backstage.cjs
-    spec: "https://versions.backstage.io/v1/tags/next/yarn-plugin"
+    spec: "https://versions.backstage.io/v1/releases/1.41.0-next.2/yarn-plugin"
 
diff --git a/README.md b/README.md
index 8c7c4373..041c4fbe 100644
--- a/README.md
+++ b/README.md
@@ -8,3 +8,3 @@ To start the app, run:
 yarn install
-yarn dev
+yarn start
 ```
diff --git a/backstage.json b/backstage.json
index 966ce7e1..034fc7f8 100644
--- a/backstage.json
+++ b/backstage.json
@@ -1,3 +1,3 @@
 {
-  "version": "1.34.0-next.1"
+  "version": "1.41.0-next.2"
 }
diff --git a/examples/template/template.yaml b/examples/template/template.yaml
index 33f262b4..f04c3241 100644
--- a/examples/template/template.yaml
+++ b/examples/template/template.yaml
@@ -50,2 +50,4 @@ spec:
     # This step publishes the contents of the working directory to GitHub.
+    # If you or your organization prefer another default branch name over 'main'
+    # you can change that here.
     - id: publish
@@ -54,5 +56,5 @@ spec:
       input:
-        allowedHosts: ['github.com']
         description: This is ${{ parameters.name }}
         repoUrl: ${{ parameters.repoUrl }}
+        defaultBranch: 'main'
 
diff --git a/package.json b/package.json
index b4dafa42..8d676193 100644
--- a/package.json
+++ b/package.json
@@ -8,5 +8,3 @@
   "scripts": {
-    "dev": "yarn workspaces foreach -A --include backend --include app --parallel -v -i run start",
-    "start": "yarn workspace app start",
-    "start-backend": "yarn workspace backend start",
+    "start": "backstage-cli repo start",
     "build:backend": "yarn workspace backend build",
@@ -24,3 +22,3 @@
     "prettier:check": "prettier --check .",
-    "new": "backstage-cli new --scope internal"
+    "new": "backstage-cli new"
   },
@@ -38,3 +36,3 @@
     "prettier": "^2.3.2",
-    "typescript": "~5.4.0"
+    "typescript": "~5.8.0"
   },
diff --git a/packages/app/package.json b/packages/app/package.json
index d36e3be1..1cbe9da8 100644
--- a/packages/app/package.json
+++ b/packages/app/package.json
@@ -17,2 +17,3 @@
     "@backstage/app-defaults": "backstage:^",
+    "@backstage/canon": "backstage:^",
     "@backstage/catalog-model": "backstage:^",
diff --git a/packages/app/src/App.test.tsx b/packages/app/src/App.test.tsx
index ec8ba1d7..b6ca21d4 100644
--- a/packages/app/src/App.test.tsx
+++ b/packages/app/src/App.test.tsx
@@ -1,2 +1 @@
-import React from 'react';
 import { render, waitFor } from '@testing-library/react';
diff --git a/packages/app/src/App.tsx b/packages/app/src/App.tsx
index e24c4689..89b199c8 100644
--- a/packages/app/src/App.tsx
+++ b/packages/app/src/App.tsx
@@ -1,2 +1 @@
-import React from 'react';
 import { Navigate, Route } from 'react-router-dom';
diff --git a/packages/app/src/components/Root/LogoFull.tsx b/packages/app/src/components/Root/LogoFull.tsx
index 47e3b731..ce636516 100644
--- a/packages/app/src/components/Root/LogoFull.tsx
+++ b/packages/app/src/components/Root/LogoFull.tsx
@@ -1,2 +1 @@
-import React from 'react';
 import { makeStyles } from '@material-ui/core';
diff --git a/packages/app/src/components/Root/LogoIcon.tsx b/packages/app/src/components/Root/LogoIcon.tsx
index 7eae8c7a..c60ba627 100644
--- a/packages/app/src/components/Root/LogoIcon.tsx
+++ b/packages/app/src/components/Root/LogoIcon.tsx
@@ -1,2 +1 @@
-import React from 'react';
 import { makeStyles } from '@material-ui/core';
diff --git a/packages/app/src/components/Root/Root.tsx b/packages/app/src/components/Root/Root.tsx
index 853d175b..31fc08db 100644
--- a/packages/app/src/components/Root/Root.tsx
+++ b/packages/app/src/components/Root/Root.tsx
@@ -1,2 +1,2 @@
-import React, { PropsWithChildren } from 'react';
+import { PropsWithChildren } from 'react';
 import { makeStyles } from '@material-ui/core';
diff --git a/packages/app/src/components/catalog/EntityPage.tsx b/packages/app/src/components/catalog/EntityPage.tsx
index 6164c760..f75d9843 100644
--- a/packages/app/src/components/catalog/EntityPage.tsx
+++ b/packages/app/src/components/catalog/EntityPage.tsx
@@ -1,2 +1 @@
-import React from 'react';
 import { Button, Grid } from '@material-ui/core';
@@ -80,3 +79,2 @@ const cicdContent = (
      */}
-
     <EntitySwitch.Case>
diff --git a/packages/app/src/components/search/SearchPage.tsx b/packages/app/src/components/search/SearchPage.tsx
index 1788dde1..08a774b1 100644
--- a/packages/app/src/components/search/SearchPage.tsx
+++ b/packages/app/src/components/search/SearchPage.tsx
@@ -1,2 +1 @@
-import React from 'react';
 import { makeStyles, Theme, Grid, Paper } from '@material-ui/core';
diff --git a/packages/app/src/index.tsx b/packages/app/src/index.tsx
index d875c774..69d6401c 100644
--- a/packages/app/src/index.tsx
+++ b/packages/app/src/index.tsx
@@ -1,5 +1,5 @@
 import '@backstage/cli/asset-types';
-import React from 'react';
 import ReactDOM from 'react-dom/client';
 import App from './App';
+import '@backstage/canon/css/styles.css';
 
diff --git a/packages/backend/Dockerfile b/packages/backend/Dockerfile
index 13ff70d9..68d6c2fd 100644
--- a/packages/backend/Dockerfile
+++ b/packages/backend/Dockerfile
@@ -10,2 +10,5 @@
 # Once the commands have been run, you can build the image using `yarn build-image`
+#
+# Alternatively, there is also a multi-stage Dockerfile documented here:
+# https://backstage.io/docs/deployment/docker#multi-stage-build
 
diff --git a/packages/backend/package.json b/packages/backend/package.json
index 016daaef..a460b55d 100644
--- a/packages/backend/package.json
+++ b/packages/backend/package.json
@@ -35,2 +35,3 @@
     "@backstage/plugin-scaffolder-backend": "backstage:^",
+    "@backstage/plugin-scaffolder-backend-module-github": "backstage:^",
     "@backstage/plugin-search-backend": "backstage:^",
diff --git a/packages/backend/src/index.ts b/packages/backend/src/index.ts
index 69a73511..6d0a6f4c 100644
--- a/packages/backend/src/index.ts
+++ b/packages/backend/src/index.ts
@@ -15,2 +15,3 @@ backend.add(import('@backstage/plugin-proxy-backend'));
 backend.add(import('@backstage/plugin-scaffolder-backend'));
+backend.add(import('@backstage/plugin-scaffolder-backend-module-github'));
 backend.add(import('@backstage/plugin-techdocs-backend'));
diff --git a/playwright.config.ts b/playwright.config.ts
index 733be130..37c7fb14 100644
--- a/playwright.config.ts
+++ b/playwright.config.ts
@@ -34,3 +34,3 @@ export default defineConfig({
         {
-          command: 'yarn dev',
+          command: 'yarn start',
           port: 3000,
diff --git a/tsconfig.json b/tsconfig.json
index 2aa745d3..eac19c5b 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -13,3 +13,4 @@
     "outDir": "dist-types",
-    "rootDir": "."
+    "rootDir": ".",
+    "jsx": "react-jsx"
   }
diff --git a/yarn.lock b/yarn.lock
index c37fc613..46a911dd 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -3 +3,26 @@
 
+
+"@google-cloud/storage@^7.0.0":
+  version "7.14.0"
+  resolved "https://registry.yarnpkg.com/@google-cloud/storage/-/storage-7.14.0.tgz#eda9715f68507949214af804c906eba6d168a214"
+  integrity sha512-H41bPL2cMfSi4EEnFzKvg7XSb7T67ocSXrmF7MPjfgFB0L6CKGzfIYJheAZi1iqXjz6XaCT1OBf6HCG5vDBTOQ==
+
+"@octokit/types@npm:^13.0.0":
+  version "13.6.2"
+  resolved "https://registry.yarnpkg.com/@octokit/types/-/types-13.6.2.tgz#e10fc4d2bdd65d836d1ced223b03ad4cfdb525bd"
+  integrity sha512-WpbZfZUcZU77DrSW4wbsSgTPfKcp286q3ItaIgvSbBpZJlu6mnYXAkjZz6LVZPXkEvLIM8McanyZejKTYUHipA==
+
+"@octokit/types@npm:^13.1.0":
+  version "13.6.2"
+  resolved "https://registry.yarnpkg.com/@octokit/types/-/types-13.6.2.tgz#e10fc4d2bdd65d836d1ced223b03ad4cfdb525bd"
+  integrity sha512-WpbZfZUcZU77DrSW4wbsSgTPfKcp286q3ItaIgvSbBpZJlu6mnYXAkjZz6LVZPXkEvLIM8McanyZejKTYUHipA==
+
+"@octokit/types@npm:^13.5.0":
+  version "13.6.2"
+  resolved "https://registry.yarnpkg.com/@octokit/types/-/types-13.6.2.tgz#e10fc4d2bdd65d836d1ced223b03ad4cfdb525bd"
+  integrity sha512-WpbZfZUcZU77DrSW4wbsSgTPfKcp286q3ItaIgvSbBpZJlu6mnYXAkjZz6LVZPXkEvLIM8McanyZejKTYUHipA==
+
+"@octokit/openapi-types@^22.2.0":
+  version "22.2.0"
+  resolved "https://registry.yarnpkg.com/@octokit/openapi-types/-/openapi-types-22.2.0.tgz#75aa7dcd440821d99def6a60b5f014207ae4968e"
+  integrity sha512-QBhVjcUa9W7Wwhm6DBFu6ZZ+1/t/oYxqc2tp81Pi41YNuJinbFRx8B133qVOrAaBbF7D/m0Et6f9/pZt9Rc+tg==
